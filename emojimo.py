import random
import json
import logging
from datetime import datetime
from pyrogram import Client, filters, enums

api_id = "no"
api_hash = "no"
bot_token = "no"
app = Client("emoji", api_id=api_id, api_hash=api_hash, bot_token=bot_token)

logging.basicConfig(filename="bot_log.txt", level=logging.INFO,
                    format="%(asctime)s - %(levelname)s - %(message)s")

# –¥–æ—Ö—É—è —Ñ—É–Ω–∫—Ü–∏–π –ø–∏–∑–¥–µ—Ü

def load_data(): # –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑ —Ñ–∞–π–ª–∞ –¥–±
    try:
        with open("data.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return {"users": {}}

def save_data(data): # —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–±
    with open("data.json", "w") as file:
        json.dump(data, file)

def get_casino_emojis(): # –∫–∞–∑–∏–Ω–æ –ê–•–ê–•–•–ê –ª–µ–Ω—å
    casino_emojis = ["üçí", "üçã", "7Ô∏è‚É£", "üé≤", "üé∞", "üí∞"]
    return random.choices(casino_emojis, k=3)

def is_admin(user_id): # –±–µ–∑ –∫–æ–º–µ–Ω—Ç–æ–≤
    user_data = data["users"].get(str(user_id), {})
    return user_data.get("admin", False)

def is_blocked(user_id): # –±–µ–∑ –∫–æ–º–µ–Ω—Ç–æ–≤
    user_data = data["users"].get(str(user_id), {})
    return user_data.get("blocked", False)

def get_credits(user_id): # –±–µ–∑ –∫–æ–º–µ–Ω—Ç–æ–≤
    user_data = data["users"].get(str(user_id), {})
    return user_data.get("credits", 0)

def set_credits(user_id, credits): # –¥–æ–±–∞–≤–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã
    data["users"].setdefault(str(user_id), {})
    data["users"][str(user_id)]["credits"] = credits
    save_data(data)

def add_credits(user_id, amount): # –±–µ–∑ –∫–æ–º–µ–Ω—Ç–æ–≤
    credits = get_credits(user_id)
    credits += amount
    set_credits(user_id, credits)

def deduct_credits(user_id, amount): # —É–¥–∞–ª–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã
    credits = get_credits(user_id)
    credits -= amount
    set_credits(user_id, credits)

def register_user(user_id): # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    set_credits(user_id, 30)
    data["users"][str(user_id)]["blocked"] = False
    data["users"][str(user_id)]["admin"] = False
    save_data(data)

def determine_prize(emojis, user_id): # –ø—Ä–∏–∑
    spins = data["users"][str(user_id)].get("spins", 0) + 1
    data["users"][str(user_id)]["spins"] = spins
    save_data(data)
    if emojis[0] == emojis[1] == emojis[2]:
        if emojis[0] == "7Ô∏è‚É£":
            return "–î–∂–µ–∫–ø–æ—Ç", 77
        else:
            return "–í—ã–∏–≥—Ä—ã—à", 25
    else:
        return "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", 0

data = load_data()

# –ø–æ—Ä—è–¥–æ–∫: start spin addcredits blockuser info buycredits commands

@app.on_message(filters.command("id", prefixes="/"))
def id_command_handler(client, message):
    user_id = message.from_user.id
    response = f"–í–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π ID: {user_id}"
    message.reply_text(response)

@app.on_message(filters.command("start", prefixes="/"))
def start_command_handler(client, message):
    user_id = message.from_user.id

    if user_id in data["users"]:
        credits = get_credits(user_id)
        spins = data["users"][str(user_id)].get("spins", 0)
        response = (
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! –í–∞—à–∏ –∫—Ä–µ–¥–∏—Ç—ã: {credits}\n"
            f"–í—Å–µ–≥–æ –∫—Ä—É—á–µ–Ω–∏–π: {spins} üîÑüé∞"
        )
    else:
        register_user(user_id)
        response = (
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Emoji Casino Bot! üé∞üéâ\n"
            "–≠—Ç–æ—Ç –±–æ—Ç ‚Äî –≤—Å–µ–≥–æ –ª–∏—à—å —Å–º–µ—à–Ω–∞—è —à—É—Ç–∫–∞, –Ω–æ –º—ã –æ—Ç–Ω–æ—Å–∏–º—Å—è –∫ –ø–æ–±–µ–¥–∞–º —Å–µ—Ä—å–µ–∑–Ω–æ! üíØ\n"
            "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å 30 –∫—Ä–µ–¥–∏—Ç–∞–º–∏. –£–¥–∞—á–∏ –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è! üçÄüòÑ"
        )

    message.reply_text(response, parse_mode=enums.ParseMode.MARKDOWN)

@app.on_message(filters.command("spin", prefixes="/"))
def spin_command_handler(client, message):
    user_id = message.from_user.id
    if is_blocked(user_id):
        message.reply_text("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞. üö´üò¢")
        return
    if not is_admin(user_id):
        credits = get_credits(user_id)
        price_per_spin = 10
        if credits < price_per_spin:
            message.reply_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –∫—Ä—É—á–µ–Ω–∏—è. üíî")
            return
        deduct_credits(user_id, price_per_spin)
    emojis_result = get_casino_emojis()
    result_text = " ".join(emojis_result)
    prize, prize_credits = determine_prize(emojis_result, user_id)
    if prize_credits > 0:
        add_credits(user_id, prize_credits)
    response = f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result_text}\n{prize}! –í—ã–∏–≥—Ä–∞–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: {prize_credits} üí∞üéâ"
    message.reply_text(response)
    logging.info(f"User {message.from_user.first_name} spun the slot machine at {datetime.now()}. Result: {result_text}, Prize: {prize} ({prize_credits} credits)")

@app.on_message(filters.command("addcredits", prefixes="/"))
def add_credits_command_handler(client, message):
    user_id = message.from_user.id
    args = message.command[1:]
    if not args or len(args) != 2:
        message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addcredits [user_id] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ].")
        return
    if not is_admin(user_id):
        message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. üîíüö´")
        return
    target_user_id, amount = args
    try:
        target_user_id = int(target_user_id)
        amount = int(amount)
    except ValueError:
        message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
        return
    if amount <= 0:
        message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        return
    add_credits(target_user_id, amount)
    message.reply_text(f"{amount} –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {target_user_id}. ‚úÖüí∞")
    logging.info(f"User {message.from_user.first_name} added {amount} credits to user {target_user_id} at {datetime.now()}")


@app.on_message(filters.command("blockuser", prefixes="/"))
def block_user_command_handler(client, message):
    user_id = message.from_user.id
    args = message.command[1:]
    if not args or len(args) != 1:
        message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /blockuser [user_id].")
        return
    if not is_admin(user_id):
        message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. üîíüö´")
        return
    target_user_id = args[0]
    try:
        target_user_id = int(target_user_id)
    except ValueError:
        message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    data["users"].setdefault(str(target_user_id), {})
    data["users"][str(target_user_id)]["blocked"] = True
    save_data(data)
    message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. üîíüö´")
    logging.info(f"User {message.from_user.first_name} blocked user {target_user_id} at {datetime.now()}")

@app.on_message(filters.command("info", prefixes="/"))
def info_command_handler(client, message):
    user_id = message.from_user.id
    if is_blocked(user_id): 
        message.reply_text("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞. üö´üò¢")
        return
    credits = get_credits(user_id)
    spins = data["users"][str(user_id)].get("spins", 0)
    response = f"–í–∞—à–∏ –∫—Ä–µ–¥–∏—Ç—ã: {credits}\n–í—Å–µ–≥–æ –∫—Ä—É—á–µ–Ω–∏–π: {spins} üîÑüé∞" # –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—Å—Ç–∞ 
    message.reply_text(response)
    logging.info(f"User {message.from_user.first_name} checked their info at {datetime.now()}")


@app.on_message(filters.command("buycredits", prefixes="/"))
def buy_credits_command_handler(client, message):
    buy_credits_text = (
        "–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∫—Ä–µ–¥–∏—Ç–æ–≤? –ö–æ–Ω–µ—á–Ω–æ! –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "
        "[@nwsynx](https://t.me/nwsynx) –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–∏ –Ω–æ–≤–µ–Ω—å–∫–∏–µ –∫—Ä–µ–¥–∏—Ç—ã! üí¨üì®\n\n"
        "–°–æ–æ–±—â–∏—Ç–µ @nwsynx, —Å–∫–æ–ª—å–∫–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –≤–∞–º –Ω—É–∂–Ω–æ, –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º. –ö–∞–∫ —Ç–æ–ª—å–∫–æ —Å–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, "
        "–∫—Ä–µ–¥–∏—Ç—ã ‚Äî –≤—Å–µ –≤–∞—à–∏! üí∞üí≥\n\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ Emoji Casino Bot! üéâüé∞" # –∫—Ä–∏–Ω–∂
    )
    message.reply_text(
        buy_credits_text,
        parse_mode=enums.ParseMode.MARKDOWN,
        disable_web_page_preview=True,
    )
    logging.info(f"User {message.from_user.first_name} asked for information about buying credits at {datetime.now()}")

@app.on_message(filters.command("commands", prefixes="/"))
def commands_command_handler(client, message):
    commands_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "/spin - –ö—Ä—É—Ç–∏—Ç—å –±–∞—Ä–∞–±–∞–Ω—ã –∫–∞–∑–∏–Ω–æ.\n"
        "/addcredits [user_id] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] - –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤).\n"
        "/blockuser [user_id] - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤).\n"
        "/info - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –∏ —á–∏—Å–ª–µ –∫—Ä—É—á–µ–Ω–∏–π.\n"
        "/buycredits - –ö—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã."
    )
    message.reply_text(commands_text, parse_mode=enums.ParseMode.MARKDOWN)

app.run()
